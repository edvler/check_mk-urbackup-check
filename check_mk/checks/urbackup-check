#!/usr/bin/python

# Author: Matthias Maderer
# E-Mail: edvler@edvler-blog.de
# URL: https://github.com/edvler/check_mk_urbackup-check
# License: GPLv2



# Example agent output
# Format:
# "{name};;;;;{filestamp};;;;;{fileok};;;;;{imagestamp};;;;;{imageok}"
#
# <<<urbackup-check>>>
# FMT-PC;;;;;-;;;;;False;;;;;-;;;;;False
# NB03;;;;;-;;;;;False;;;;;2017-05-15_08:51;;;;;False
# PC01;;;;;2018-02-16_18:05;;;;;False;;;;;2018-02-16_19:26;;;;;True
# PC02;;;;;2018-02-19_07:44;;;;;True;;;;;2018-02-19_07:56;;;;;True
# PC03;;;;;2018-02-12_00:08;;;;;False;;;;;2017-05-15_09:36;;;;;False
# PC04;;;;;-;;;;;False;;;;;2018-01-01_00:00;;;;;False
# PC05;;;;;2017-10-02_00:08;;;;;False;;;;;2018-02-17_12:02;;;;;True
# pc-xx;;;;;-;;;;;False;;;;;2017-05-15_09:16;;;;;False
# swyx01;;;;;2018-02-19_00:02;;;;;True;;;;;2018-02-19_00:50;;;;;True
#
# If the date field contains "-" no backup was done for this machine.
# Fileok and imageok represents the status of the UrBackup Status page.

# default parameters
urbackup_check_default_levels = {'check_backup': 'check', 'backup_age': (93600, 108000), 'modi': 'use_backup_age'}

# the inventory function (dummy)
def inventory_urbackup(info):
    # loop over all output lines of the agent
    for line in info:
        arr_backups = line[0].split(';;;;;')
        machine_name = arr_backups[0]
        yield machine_name + ' filebackup', "urbackup_check_default_levels"
        yield machine_name + ' imagebackup', "urbackup_check_default_levels"

# the check function (dummy)
def check_urbackup(item, params, info):
    #extract machine_name and backup_type
    machine_name = item[:-11].strip()
    backup_type = item[-11:].strip()

    #return 0 if check of backups should not be done
    if params['check_backup'] == 'ignore':
        return 0, backup_type + ' check disabled by rule'

    for line in info:
        machine_infos = line[0].split(";;;;;")

        if machine_infos[0] == machine_name:
            stamp = None
            status = None

            #get status and timestamp depending on type
            if backup_type == 'filebackup':
                status = machine_infos[2]
                stamp = getDateFromString(machine_infos[1])

            if backup_type == 'imagebackup':
                status = machine_infos[4]
                stamp = getDateFromString(machine_infos[3])

            #if urbackup status is used ...
            if params['modi'] == 'use_urbackup_status' and status == 'True':
                return 0, 'status reported by UrBackup is: True'
            if params['modi'] == 'use_urbackup_status' and status == 'False':
                return 2, 'status reported by UrBackup is: False'

            #if backup age is used
            if stamp is not None:
                old = time.time() - time.mktime(stamp)
                
                duration_formatted = pretty_time_delta(old)
                infotext = 'last ' + backup_type + ' finished: ' + time.strftime("%Y-%m-%d %H:%M", stamp) + ' (' + duration_formatted + ' ago)'

                warn, error = params['backup_age']
                if old >= error:
                    return 2, infotext
                if old >= warn:
                    return 1, infotext

                return 0, infotext

            else:
                return 2, 'no ' + backup_type + ' done yet'

    return 3, "error occured in check plugin. Please post a issue on https://github.com/edvler/check_mk_urbackup-check/issues inlcuding the output of the agent plugin /usr/lib/check_mk_agent/plugins/urbackup-check"

# declare the check to Check_MK
check_info["urbackup-check"] = {
    'check_function':            check_urbackup,
    'inventory_function':        inventory_urbackup,
    'service_description':       'UrBackup',
    'group':                     'urbackup',
}

def getDateFromString(datetime_string):
    try:
        d = time.strptime(datetime_string,"%Y-%m-%d_%H:%M")
        return d
    except ValueError:
        return None

#thanks to https://gist.github.com/thatalextaylor/7408395
def pretty_time_delta(seconds):
    sign_string = '-' if seconds < 0 else ''
    seconds = abs(int(seconds))
    days, seconds = divmod(seconds, 86400)
    hours, seconds = divmod(seconds, 3600)
    minutes, seconds = divmod(seconds, 60)
    if days > 0:
        return '%s%d days %d hours %d minutes' % (sign_string, days, hours, minutes)
    elif hours > 0:
        return '%s%d hours %d minutes' % (sign_string, hours, minutes)
    elif minutes > 0:
        return '%s%d minutes' % (sign_string, minutes)
    else:
        return '0 minutes'
