#!/usr/bin/python

# Author: Matthias Maderer
# E-Mail: edvler@edvler-blog.de
# URL: https://github.com/edvler/check_mk_urbackup-check
# License: See https://github.com/edvler/check_mk_urbackup-check

from datetime import datetime

# default parameters
urbackup_params = {'check_backup': 'check', 'backup_age': (93600, 108000), 'modi': 'use_backup_age'}

# the inventory function (dummy)
def inventory_urbackup(info):
   # loop over all output lines of the agent
   for line in info:
   	arr_backups = line[0].split(';;;;;')
        machine_name = arr_backups[0]
	yield machine_name + ' ' + 'filebackup', "urbackup_params"
	yield machine_name + ' ' + 'imagebackup', "urbackup_params"

# the check function (dummy)
def check_urbackup(item, params, info):
   #ensure defaults
   if not 'check_backup' in params:
        params['check_backup'] = 'check'

   if not 'backup_age' in params:
        params['backup_age'] = (93600, 108000)

   if not 'modi' in params:
	params['modi'] = 'use_backup_age'

   #extract machine_name and backup_type
   machine_name = item[:-11].strip()
   backup_type = item[-11:].strip()

   #return 0 if check of backups should not be done
   if params['check_backup'] == 'ignore':
        return 0, 'UrBackups not checked for ' + machine_name +  '!'

   for line in info:
	machine_infos = line[0].split(";;;;;")

	if machine_infos[0] == machine_name:

		stamp = None
		status = None
	
		#get status and timestamp depending on type
		if backup_type == 'filebackup':
			status = machine_infos[2]
			stamp = getDateFromString(machine_infos[1])

		if backup_type == 'imagebackup':
        	        status = machine_infos[4]
	                stamp = getDateFromString(machine_infos[3])

		#if urbackup status is used ...
		if params['modi'] == 'use_urbackup_status' and status == 'True':
			return 0, 'Status reported by UrBackup is True'
	        if params['modi'] == 'use_urbackup_status' and status == 'False':
        	        return 2, 'Status reported by UrBackup is False'

		#if backup age is used
		if stamp is not None:
			old = datetime.now() - stamp

			duration_formatted = pretty_time_delta(old.total_seconds())
			infotext = backup_type + ' (' + machine_name + ') from ' + str(stamp) + ' is ' + duration_formatted + ' old'

			warn, error = params['backup_age']
		        if old.total_seconds() > error:
		                return 2, 'To old! ' + infotext
		        if old.total_seconds() > warn:
        	       		return 1, 'To old! ' + infotext

			return 0, infotext

		else:
			return 2, 'No ' + backup_type + '(s) exists for ' + machine_name +  '!'

   return 3, "Error occured in check plugin. Please post a issue on https://github.com/edvler/check_mk_urbackup-check/issues inlcuding the output of the agent plugin /usr/lib/check_mk_agent/plugins/urbackup-check"

# declare the check to Check_MK
check_info["urbackup-check"] = {
    'check_function':            check_urbackup,
    'inventory_function':        inventory_urbackup,
    'service_description':       'UrBackup',
    'group':                     'urbackup',
}

def getDateFromString(datetime_string):
	try:
        	d = datetime.strptime(datetime_string,"%Y-%m-%d_%H:%M")
	        return d
	except ValueError:
		return None


#thanks to https://gist.github.com/thatalextaylor/7408395
def pretty_time_delta(seconds):
    sign_string = '-' if seconds < 0 else ''
    seconds = abs(int(seconds))
    days, seconds = divmod(seconds, 86400)
    hours, seconds = divmod(seconds, 3600)
    minutes, seconds = divmod(seconds, 60)
    if days > 0:
        return '%s%dd %dh %dm %ds' % (sign_string, days, hours, minutes, seconds)
    elif hours > 0:
        return '%s%dh %dm %ds' % (sign_string, hours, minutes, seconds)
    elif minutes > 0:
        return '%s%dm %ds' % (sign_string, minutes, seconds)
    else:
        return '%s%ds' % (sign_string, seconds)
